{
	"id": "ae5dd690-2555-ed11-ade6-000d3ab237df",
	"createdAt": "2022-10-26T11:58:56.063Z",
	"createdBy": "lloyd.trevarthen@neptune-software.com",
	"git": {
		"targetServers": [],
		"remote": "https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-launchpadstandard"
	},
	"name": "neptunesoftware-dxp-abb-launchpadstandard",
	"description": null,
	"ver": "23.8.31.1121",
	"enableCICD": true,
	"apps": [
		{
			"id": "479ca632-13f8-4b0e-a8a0-eb1ed336432c",
			"application": "planet9_launchpad_standard",
			"title": "",
			"description": "Planet 9 Launchpad ",
			"package": {
				"id": "ae5dd690-2555-ed11-ade6-000d3ab237df",
				"createdAt": "2022-10-26T11:58:56.063Z",
				"updatedAt": "2023-09-20T07:25:40.663Z",
				"createdBy": "lloyd.trevarthen@neptune-software.com",
				"changedBy": "system",
				"git": {
					"targetServers": [],
					"remote": "https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-launchpadstandard",
					"packageJSON": [
						"==OBJECT STRING==",
						"{",
						"  \"name\": \"neptunesoftware-dxp-abb-launchpadstandard\",",
						"  \"version\": \"1.0.0\",",
						"  \"description\": \"neptunesoftware-dxp-abb-launchpadstandard\",",
						"  \"author\": \"Neptune Software\",",
						"  \"license\": \"LicenseRef-LICENSE\",",
						"  \"private\": true,",
						"  \"scripts\": {",
						"    \"deploy\": \"ts-node src/deploy.ts\",",
						"    \"test\": \"jest --passWithNoTests\"",
						"  },",
						"  \"engines\": {",
						"    \"node\": \"14.16.0\"",
						"  },",
						"  \"devDependencies\": {",
						"    \"@types/jest\": \"^27.1.5\",",
						"    \"typescript\": \"^4.2.3\",",
						"    \"ts-node\": \"^10.0.0\",",
						"    \"axios\": \"^0.21.1\",",
						"    \"jest\": \"^27.0.4\",",
						"    \"ts-jest\": \"^27.0.3\"",
						"  }",
						"}",
						""
					],
					"workflow": [
						"==OBJECT STRING==",
						"name: Example deploy workflow",
						"",
						"#on:",
						"#  push:",
						"",
						"#jobs:",
						"",
						"  #build:",
						"",
						"    #runs-on: ubuntu-latest",
						"",
						"    #strategy:",
						"    #  matrix:",
						"    #    node-version: [18.x]",
						"",
						"    #steps:",
						"    #- uses: actions/checkout@v2",
						"    #- name: Installing node.js ${{ matrix.node-version }}",
						"    #  uses: actions/setup-node@v1",
						"    #  with:",
						"    #    node-version: ${{ matrix.node-version }}",
						"",
						"    #- run: npm install",
						"",
						"    # Comment out to run the deploy script when you push to the repository.",
						"    #- run: npm run deploy",
						"    #  env:",
						"    #    DXP_OE_SERVER_URL: ${{ secrets.CDCI_STAGING_URL }}",
						"    #    DXP_OE_SERVER_TOKEN: ${{ secrets.CDCI_STAGING_TOKEN }}",
						"    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}",
						"",
						"    # Comment out to run test script after deployment.",
						"    #- run: npm run test",
						"    #  env:",
						"    #    DXP_OE_SERVER_URL: ${{ secrets.CDCI_STAGING_URL }}",
						"    #    DXP_OE_SERVER_TOKEN: ${{ secrets.CDCI_STAGING_TOKEN }}",
						""
					],
					"deploy": [
						"==OBJECT STRING==",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"import * as path from 'path';",
						"import * as fs from \"fs\";",
						"",
						"const servers = (process.env.P9_SERVER_URL && process.env.P9_SERVER_TOKEN)",
						"    ? [{url: process.env.P9_SERVER_URL, token: process.env.P9_SERVER_TOKEN}]",
						"    : JSON.parse(`[]`);",
						"",
						"const agent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"const packageRelationEntityType: {",
						"    name: string;",
						"    entityType: string;",
						"    sequence?: number;",
						"    relations?: string[];",
						"}[] = [",
						"    { name: 'role', entityType: 'role' },",
						"    { name: 'wf_notifications', entityType: 'wf_notifications' },",
						"    { name: 'certificates', entityType: 'certificates' },",
						"    { name: 'odataMock', entityType: 'odataMock' },",
						"    { name: 'theme', entityType: 'theme' },",
						"    { name: 'pdf', entityType: 'pdf' },",
						"    { name: 'doc', entityType: 'doc' },",
						"    { name: 'jsscript_group', entityType: 'jsscript_group' },",
						"    { name: 'script_scheduler', entityType: 'script_scheduler' },",
						"    { name: 'wf_definition', entityType: 'wf_definition' },",
						"    { name: 'api_authentication', entityType: 'api_authentication' },",
						"    { name: 'systems', entityType: 'systems' },",
						"",
						"    { name: 'api_group', entityType: 'api_group' },",
						"    { name: 'api', entityType: 'api', relations: ['roles'] },",
						"    { name: 'jsclass', entityType: 'jsscript' },",
						"    { name: 'odataSource', entityType: 'odataSource' },",
						"",
						"    { name: 'rulesengine', entityType: 'rulesengine', relations: ['roles'] },",
						"    { name: 'department', entityType: 'department', relations: ['roles'] },",
						"    { name: 'tile', entityType: 'tile', relations: ['roles'] },",
						"    {",
						"        name: 'dictionary',",
						"        entityType: 'dictionary',",
						"        relations: ['rolesRead', 'rolesWrite'],",
						"    },",
						"    { name: 'apps', entityType: 'app_runtime', relations: ['apis'] },",
						"    { name: 'category', entityType: 'category', relations: ['roles', 'tiles'] },",
						"    { name: 'launchpad', entityType: 'launchpad', relations: ['cat'] },",
						"    {",
						"        name: 'reports',",
						"        entityType: 'reports',",
						"        relations: ['roles', 'scriptSelObj', 'scriptRunObj', 'tableObj'],",
						"    },",
						"];",
						"",
						"const artifactsPath = path.join(process.cwd(), 'artifacts');",
						"",
						"async function readFile(",
						"    path: fs.PathLike,",
						"    options?: { encoding?: BufferEncoding; flag?: string } | BufferEncoding,",
						"): Promise<string | Buffer> {",
						"    return new Promise((resolve, reject) => {",
						"        fs.readFile(path, options, (err, data) => {",
						"            err ? reject(err) : resolve(data);",
						"        });",
						"    });",
						"}",
						"",
						"async function readPackageFile() {",
						"    const content = await readFile(path.join(artifactsPath, 'dev_package.json'), 'utf-8') as string;",
						"    return JSON.parse(content);",
						"}",
						"",
						"async function deployPackageFile(devPackage, url, token) {",
						"    try {",
						"        await axios.post(`${url}/api/functions/Package/SaveDeployPackage`, devPackage, {",
						"            httpsAgent: agent,",
						"            headers: {",
						"                'Authorization': `Bearer ${token}`,",
						"            }",
						"        });",
						"    } catch (e) {",
						"        console.log(`Error sending development package to: ${url}`, e);",
						"    }",
						"}",
						"",
						"(async () => {",
						"    try {",
						"        const devPackage = await readPackageFile();",
						"",
						"        for (let i = 0; i < packageRelationEntityType.length; i++) {",
						"",
						"            const artifactType = packageRelationEntityType[i];",
						"            const artifacts = devPackage[artifactType.name];",
						"",
						"            if (!artifacts?.length) continue;",
						"",
						"            const artifactTypePath = path.join(artifactsPath, artifactType.entityType);",
						"            for (let y = 0; y < artifacts.length; y++) {",
						"                const artifact = artifacts[y]",
						"                const filename = `${artifact.name || artifact.title || artifact.application}-${artifact.id}`;",
						"                devPackage[artifactType.name][y] = JSON.parse(await readFile(path.join(artifactTypePath, filename) + '.json', 'utf-8') as string);",
						"            }",
						"        }",
						"",
						"        for (let i = 0; i < servers.length; i++) {",
						"            await deployPackageFile(devPackage, servers[i].url, servers[i].token);",
						"        }",
						"        console.log('Package has been deployed');",
						"    } catch (e) {",
						"        console.log('Failed to deploy package', e);",
						"    }",
						"    process.exit(0);",
						"})();",
						""
					],
					"test": [
						"==OBJECT STRING==",
						"/**",
						" * Example test file after deployment.",
						" */",
						"",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"",
						"const serverUrl = process.env.DXP_OE_SERVER_URL;",
						"const serverToken = process.env.DXP_OE_SERVER_TOKEN;",
						"",
						"const healtzUrl = (server: string) => `${server}/healthz`;",
						"",
						"const httpsAgent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"async function axiosGet(url: string, config: Record<string, unknown> = {}) {",
						"    return axios.get(url, { httpsAgent, headers: {",
						"            'Authorization': `Bearer ${serverToken}`,",
						"        }, ...config});",
						"}",
						"",
						"describe(`Running test script after deployment to ${serverUrl}`, () => {",
						"",
						"    test('Server healtz', async () => {",
						"        const response = await axiosGet(healtzUrl(serverUrl));",
						"        expect(response.status).toBe(200);",
						"    });",
						"",
						"    /**",
						"     * More tests...",
						"     */",
						"});",
						""
					],
					"head": "a6184f1202a0cb97c03d394021dceec0b2f3215a",
					"storeAuthInDb": true,
					"auth": {
						"authType": 1,
						"username": "",
						"password": "@planet9_placeholder_password@",
						"token": "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"
					}
				},
				"name": "neptunesoftware-dxp-abb-launchpadstandard",
				"description": null,
				"ver": "23.8.31.1121",
				"enableCICD": true
			}
		}
	],
	"api": [],
	"odataSource": [],
	"odataMock": [],
	"dictionary": [],
	"jsclass": [],
	"jsscript_group": [],
	"theme": [],
	"pdf": [],
	"rulesengine": [],
	"reports": [],
	"api_authentication": [],
	"api_group": [],
	"tile": [],
	"category": [],
	"launchpad": [],
	"certificates": [],
	"role": [],
	"systems": [],
	"doc": [],
	"wf_notifications": [],
	"department": [],
	"script_scheduler": [],
	"wf_definition": [],
	"connector": [],
	"events": [],
	"code_snippets": [],
	"wf_determination": [],
	"wf_taskaction": []
}